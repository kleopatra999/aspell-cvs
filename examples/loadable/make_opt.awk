#!/bin/awk
#  This file is part of The New Aspell
#  Copyright (C) 2002 by Christoph Hintermüller under the GNU LGPL license
#  version 2.0 or 2.1.  You should have received a copy of the LGPL
#  license along with this library if you did not you can find
#  it at http://www.gnu.org/.
#
#  Added by Christoph Hintermüller
#  this script can be used to generate .opt files from sources in
#  connection with DESCRIPTION and NEW_OPTION macros
BEGIN{
  optionfile="";
}
/^[ \t]*DESCRIPTION\(/{
  sub(/^[ \t]*DESCRIPTION\(/,"");
  textline=$0;
  while(match(textline,/\\+$/)&&(RLENGTH%2)){
    sub(/\\+$/," ",textline);
    getline;
    textline=sprintf("%s%s",textline,$0);
    sub(/\"[ \t]*\"/,"",textline);
  }
  sub(/\).*$/,"",textline);
  if(split(textline,filter,/,/)!=5){
    printf "%s: Line: %i: bad filter description",FILENAME,FNR > "/dev/stderr";
    exit 1;
  }
  sub(/^[ \t]*\"/,"",filter[1]);
  sub(/\"[ \t]*$/,"",filter[1]);
  sub(/^[ \t]*\"/,"",filter[3]);
  sub(/\"[ \t]*$/,"",filter[3]);
  sub(/^[ \t]*\"/,"",filter[4]);
  sub(/\"[ \t]*$/,"",filter[4]);
  gsub(/\\;/,",",filter[3]);
  if(length(filter[1])==0){
    printf "%s: Line: %i: no filter name present\n",FILENAME,FNR > "/dev/stderr";
    exit 1
  }
  gsub(/_/,"-",filter[1]);
  if(!match(filter[1],/-filter$/)){
    sub(/$/,"-filter",filter[1]);
  }
  optionfile=sprintf("%s.opt",filter[1]);
  printf "generating file: %s\n",optionfile > "/dev/stderr";
  printf "#Aspell Option file for lib%s.so\n",filter[1]  > optionfile;
  printf "#Automatically generated file.\n"> optionfile;
  printf "#Was generated by make_opt.awk script do not change directly" > optionfile;
  printf "ASPELL %s\n",filter[4] > optionfile;
}
/^[ \t]*NEW_OPTION\(/{
  sub(/^[ \t]*NEW_OPTION\(/,"");
  textline=$0;
  while(match(textline,/\\+$/)&&(RLENGTH%2)){
    sub(/\\+$/," ",textline);
    getline;
    textline=sprintf("%s%s",textline,$0);
    sub(/\"[ \t]*\"/,"",textline);
  }
  sub(/\)[^\)]*$/,"",textline);
  if((elements=split(textline,option,/[ \t]*,[ \t]*/))!=7){
    printf "%s: Line: %i: invalid NEW_OTPTION line\n", FILENAME,FNR > "/dev/stderr";
    exit 1;
  }
  if(length(option[1])==0){
    printf "%s: Line: %i: invalid name of Option\n",FILENAME,FNR> "/dev/stderr";
    exit 1
  }
  sub(/^[ \t]*\"/,"",option[1]);
  sub(/\"[ \t]*$/,"",option[1]);
  sub(/^[ \t]*\"/,"",option[5]);
  sub(/\"[ \t]*$/,"",option[5]);
  sub(/^[ \t]*\"/,"",option[6]);
  sub(/\"[ \t]*$/,"",option[6]);
  sub(/^[ \t]*\"/,"",option[7]);
  sub(/\"[ \t]*$/,"",option[7]);
  gsub(/\\;/,",",option[5]);
  gsub(/\\;/,",",option[6]);
  if(length(option[7])==0){
    printf "%s: Line: %i: no filtername present\n",FILENAME,FNR> "/dev/stderr";
    exit 1
  }
  gsub(/_/,"-",option[7]);
  if(!match(option[7],/-filter$/)){
    sub(/$/,"-filter",option[7]);
  }
  optionfile=sprintf("%s.opt",option[7]);
  printf "%s: Line: %i: adding Option; `%s' to File: %s\n",FILENAME,FNR,option[1],optionfile > "/dev/stderr";
  printf "OPTION %s\n",option[1] >>optionfile;
  printf "TYPE %s\n",option[2] >>optionfile;
  printf "DEFAULT %s\n",option[5] >>optionfile;
  printf "DESCRIPTION %s\n",option[6] >>optionfile;
}
